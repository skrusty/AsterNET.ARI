<#@ template debug="true" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.linq" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="$(ProjectDir)bin\Debug\ARICodeGen.exe" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Newtonsoft.Json.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft" #>
<#@ import namespace="ARICodeGen" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#
System.Diagnostics.Debugger.Launch();
var manager = TemplateFileManager.Create(this);
	manager.CanOverrideExistingFile = true;
	manager.IsAutoIndentEnabled = true;
var filesPath = @"..\Data\";
var files = new List<string>() { 
	filesPath + "Events.json",
	filesPath + "Bridges.json",
	filesPath + "Channels.json",
	filesPath + "Asterisk.json",
	filesPath + "Applications.json",
	filesPath + "Endpoints.json",
	filesPath + "DeviceStates.json",
	filesPath + "Playbacks.json",
	filesPath + "Sounds.json",
	filesPath + "Recordings.json",
	filesPath + "Mailboxes.json"
};
var events = new List<string>();
var fileProperties = new FileProperties()
{
	BuildAction = BuildAction.Compile
};
#>

<#	
foreach (var file in files)
{
	var subtypes = new Dictionary<string, List<string>>();
	var filename = System.IO.Path.GetFileNameWithoutExtension(file);
	var actionClassName = filename + "Actions";

	using (StreamReader reader = File.OpenText(Host.ResolvePath(file)))
	{
#>
<#
		//
		// Start Model Output
		//
		var o = (Newtonsoft.Json.Linq.JObject)JToken.ReadFrom(new JsonTextReader(reader));
		var models = o["models"];

		// check for subtypes
		foreach(var item in models.Values()) {

			
			try {
				foreach (JValue prop in item.SelectToken("subTypes"))
				{
	
					if(!subtypes.ContainsKey(item.SelectToken("id").Value<string>())) {
						subtypes.Add(item.SelectToken("id").Value<string>(), new List<string>()); 
					}
					subtypes[item.SelectToken("id").Value<string>()].Add(prop.ToString());
				}
			}
			catch{}

        }

        foreach (var item in models.Values())
        {
			// if class exists in subtypes, extend
			var inherit = subtypes.Where(x => x.Value.Contains(item.SelectToken("id").Value<string>())).SingleOrDefault().Key;
			var className = item.SelectToken("id").Value<string>();
			var output = "/Models";
			if(inherit == "Event")
			{
				className += "Event";
				events.Add(className);
				// look to see if this is an event. If so, we should put this in the events folder
				output = "/Events";
            }

			// create new file
			manager.StartNewFile(className + ".cs", projectName:"AsterNET.ARI", folderName:"ARI_1_0" + output, fileProperties:fileProperties);
#>
/*
	AsterNET ARI Framework
	Automatically generated file @ <#= DateTime.Now.ToString() #>
*/
using System;
using System.Collections.Generic;
using AsterNET.ARI.Actions;

namespace AsterNET.ARI.Models
{
	/// <summary>
	/// <#= item.SelectToken("description", false) !=null ? item.SelectToken("description").Value<string>().Replace("\n", " ") : "no desciption" #>
	/// </summary>
	public class <#= className #> <#= !string.IsNullOrEmpty(inherit) ? string.Format(" : {0}", inherit) : "" #>
	{


<# 
				foreach (var prop in item.SelectToken("properties"))
				{
					var jProp = ((JProperty)prop);

#>
		/// <summary>
		/// <#= prop.First().SelectToken("description", false) !=null ? prop.First().SelectToken("description", false).Value<string>().Replace("\n", " ") : "no description provided" #>
		/// </summary>
		public <#= ARICodeGen.SwaggerHelper.TypeConvert(prop.First().SelectToken("type").Value<string>()) #> <#= ARICodeGen.SwaggerHelper.GetSafeName(jProp.Name) #> { get; set; }

<#
				}
				// check for subtypes
				/*try {
					foreach (JValue prop in item.SelectToken("subTypes"))
					{
	
						if(!subtypes.ContainsKey(item.SelectToken("id").Value<string>())) {
							subtypes.Add(item.SelectToken("id").Value<string>(), new List<string>()); 
						}
						subtypes[item.SelectToken("id").Value<string>()].Add(prop.ToString());
					}
				}
				catch{}*/
#>
	}
}
<#
		}
#>
<#

		var apis = o["apis"];
		
		//
		// Generate Action Interface
		//
		
		manager.StartNewFile("I" + actionClassName + ".cs", "AsterNET.ARI", "ARI_1_0/Actions");

#>
/*
	AsterNET ARI Framework
	Automatically generated file @ <#= DateTime.Now.ToString() #>
*/
using System;
using System.Collections.Generic;
using AsterNET.ARI.Models;
using AsterNET.ARI;
using System.Threading.Tasks;

namespace AsterNET.ARI.Actions
{
	
	public interface I<#= actionClassName #>
	{
<#

		foreach (var item in apis)
		{
			var path = item.SelectToken("path").Value<string>().Substring(1);
			var operations = item.SelectToken("operations");
			
			foreach(var op in operations) 
			{
				
				var methodName = op.SelectToken("nickname").Value<string>();
				var description = string.Format("{0}. {1}", op.SelectToken("summary").Value<string>(), op.SelectToken("notes") == null ? "" : op.SelectToken("notes").Value<string>());
				var httpMethod = op.SelectToken("httpMethod").Value<string>();
			
				var responseType = ARICodeGen.SwaggerHelper.TypeConvert(op.SelectToken("responseClass").Value<string>());

				var parameters = string.Empty;
			
				try {
					var allParams = op.SelectToken("parameters").ToList();
					try {
						allParams = allParams.OrderByDescending(x => x.SelectToken("required").Value<bool>()).ToList();
					}catch{}

					foreach(var param in allParams) {
						// Get Param Type
						var paramType = ARICodeGen.SwaggerHelper.TypeConvert(param.SelectToken("dataType").Value<string>());
						// string defaultValue = param.SelectToken("defalutValue").Value<string>()
						var optionalString = "";
						if(param.SelectToken("required") != null && !param.SelectToken("required").Value<bool>()){
							if(paramType == "int" || paramType == "bool" || paramType == "long")
								paramType = paramType + "?";
							
							optionalString = " = null";
						}
						parameters += string.Format("{2}{1} {0}{3}", 
							param.SelectToken("name").Value<string>(), 
							paramType, 
							parameters.Length > 0 ? ", " : "", 
							optionalString);
					}
				}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
				}

#>
		/// <summary>
		/// <#= description ?? "no description provided" #>
		/// </summary>
<# 
				try {
					foreach(var param in op.SelectToken("parameters")) {
#>
		/// <param name="<#= param.SelectToken("name").Value<string>() #>"><#= param.SelectToken("description").Value<string>() #></param>
<#
					}
                }catch{}
#>
		<#= responseType #> <#= ARICodeGen.SwaggerHelper.GetSafeName(methodName) #>(<#= parameters #>);
<#			}
		}
#>

<#

		foreach (var item in apis)
		{
			var path = item.SelectToken("path").Value<string>().Substring(1);
			var operations = item.SelectToken("operations");
			
			foreach(var op in operations) 
			{
				
				var methodName = op.SelectToken("nickname").Value<string>() + "Async";
				var description = string.Format("{0}. {1}", op.SelectToken("summary").Value<string>(), op.SelectToken("notes") == null ? "" : op.SelectToken("notes").Value<string>());
				var httpMethod = op.SelectToken("httpMethod").Value<string>();
			
				var responseType = ARICodeGen.SwaggerHelper.TypeConvertTask(op.SelectToken("responseClass").Value<string>());

				var parameters = string.Empty;
			
				try {
					var allParams = op.SelectToken("parameters").ToList();
					try {
						allParams = allParams.OrderByDescending(x => x.SelectToken("required").Value<bool>()).ToList();
					}catch{}

					foreach(var param in allParams) {
						// Get Param Type
						var paramType = ARICodeGen.SwaggerHelper.TypeConvert(param.SelectToken("dataType").Value<string>());
						// string defaultValue = param.SelectToken("defalutValue").Value<string>()
						var optionalString = "";
						if(param.SelectToken("required") != null && !param.SelectToken("required").Value<bool>()){
							if(paramType == "int" || paramType == "bool" || paramType == "long")
								paramType = paramType + "?";
							
							optionalString = " = null";
						}
						parameters += string.Format("{2}{1} {0}{3}", 
							param.SelectToken("name").Value<string>(), 
							paramType, 
							parameters.Length > 0 ? ", " : "", 
							optionalString);
					}
				}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
				}

#>
		/// <summary>
		/// <#= description ?? "no description provided" #>
		/// </summary>
<# 
				try {
					foreach(var param in op.SelectToken("parameters")) {
						try {
						var pName = param.SelectToken("name").Value<string>();
						var pDesc = param.SelectToken("description").Value<string>();
#>
		/// <param name="<#= pName #>"><#= pDesc #></param>
<#
						}catch{}
					}
                }catch{}
#>
		<#= responseType #> <#= ARICodeGen.SwaggerHelper.GetSafeName(methodName) #>(<#= parameters #>);
<#			}
		}
#>
	}
}
<#

		//
		// Start Actions Output
		//

		manager.StartNewFile(actionClassName + ".cs", "AsterNET.ARI", "ARI_1_0/Actions");
#>
/*
	AsterNET ARI Framework
	Automatically generated file @ <#= DateTime.Now.ToString() #>
*/
using System.Collections.Generic;
using System.Linq;
using AsterNET.ARI.Middleware;
using AsterNET.ARI.Models;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace AsterNET.ARI.Actions
{
	
	public class <#= actionClassName #> : ARIBaseAction, I<#= actionClassName #>
	{

		public <#= actionClassName #>(IActionConsumer consumer)
			: base(consumer)
		{}

<#
		// Get each operation
		foreach (var item in apis)
		{
			var path = item.SelectToken("path").Value<string>().Substring(1);
			var operations = item.SelectToken("operations");
			
			foreach(var op in operations) 
			{
				
				var methodName = op.SelectToken("nickname").Value<string>();
				var description = string.Format("{0}. {1}", op.SelectToken("summary").Value<string>(), op.SelectToken("notes") == null ? "" : op.SelectToken("notes").Value<string>());
				var httpMethod = op.SelectToken("httpMethod").Value<string>();
			
				var responseType = ARICodeGen.SwaggerHelper.TypeConvert(op.SelectToken("responseClass").Value<string>());

				var parameters = string.Empty;
			
				try {
					var allParams = op.SelectToken("parameters").ToList();
					try {
						allParams = allParams.OrderByDescending(x => x.SelectToken("required").Value<bool>()).ToList();
					}catch{}

					foreach(var param in allParams) {
						// Get Param Type
						var paramType = ARICodeGen.SwaggerHelper.TypeConvert(param.SelectToken("dataType").Value<string>());
						// string defaultValue = param.SelectToken("defalutValue").Value<string>()
						var optionalString = "";
						if(param.SelectToken("required") != null && !param.SelectToken("required").Value<bool>()){
							if(paramType == "int" || paramType == "bool" || paramType == "long")
								paramType = paramType + "?";
							
							optionalString = " = null";
						}
						parameters += string.Format("{2}{1} {0}{3}", 
							param.SelectToken("name").Value<string>(), 
							paramType, 
							parameters.Length > 0 ? ", " : "", 
							optionalString);
					}
				}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
				}

#>
		/// <summary>
		/// <#= description ?? "no description provided" #>
		/// </summary>
<# 
				try {
					foreach(var param in op.SelectToken("parameters")) {
						try {
						var pName = param.SelectToken("name").Value<string>();
						var pDesc = param.SelectToken("description").Value<string>();
#>
		/// <param name="<#= pName #>"><#= pDesc #></param>
<#
						}catch(Exception ex){
							System.Diagnostics.Debug.WriteLine(ex.Message);
						}
					}
                }catch{}
#>
		public <#= responseType #> <#= ARICodeGen.SwaggerHelper.GetSafeName(methodName) #>(<#= parameters #>)
		{
			string path = "<#= path #>";
			var request = GetNewRequest(path, HttpMethod.<#= httpMethod.ToUpper() #>);
<# 
			try {
				foreach(var param in op.SelectToken("parameters")) {
					var paramType = ARICodeGen.SwaggerHelper.TypeConvert(param.SelectToken("dataType").Value<string>());
					// Perform null check in code
#>
			if(<#= param.SelectToken("name").Value<string>() #> != null)
<#
					if(param.SelectToken("paramType").Value<string>() == "path"){
#>
				request.AddUrlSegment("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>);
<# 
					}else if(param.SelectToken("paramType").Value<string>() == "query"){
#>
				request.AddParameter("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>, ParameterType.QueryString);
<#
					}else if(param.SelectToken("paramType").Value<string>() == "body"){
#>
			{
				request.AddParameter("application/json", new { <#= param.SelectToken("name").Value<string>() #> = <#= param.SelectToken("name").Value<string>() #> }, ParameterType.RequestBody);
			}
<#
					}else if(param.SelectToken("paramType").Value<string>() == "header"){
#>
				request.AddParameter("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>, ParameterType.HttpHeader);
<#
					}else if(param.SelectToken("paramType").Value<string>() == "form"){
#>
				request.AddParameter("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>, ParameterType.HttpHeader);
<#
					}



				}
			}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
			}
			if(responseType == "void") {
#>
			var response = Execute(request);
			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return;
<#			}else if(responseType == "byte[]") {
#>
			var response = Execute(request);
			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return response.RawData;
<#			}else{#>

			var response = Execute<<#= responseType #>>(request);

			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return response.Data;
<#			} #>
			switch((int)response.StatusCode)
            {
<#  
			try {
				foreach(var errorCode in op.SelectToken("errorResponses")) {
#>
				case <#= errorCode.SelectToken("code").Value<string>() #>:
					throw new AriException("<#= errorCode.SelectToken("reason").Value<string>() #>", (int)response.StatusCode);
<#  
				}
			}catch{}
        
#>
				default:
					// Unknown server response
					throw new AriException(string.Format("Unknown response code {0} from ARI.", response.StatusCode), (int)response.StatusCode);
            }
		}
<#		} 
		
	}
	//
	// end of for on operations 
	//
#>

<#
		// Get each operation
		foreach (var item in apis)
		{
			var path = item.SelectToken("path").Value<string>().Substring(1);
			var operations = item.SelectToken("operations");
			
			foreach(var op in operations) 
			{
				
				var methodName = op.SelectToken("nickname").Value<string>();
				var description = string.Format("{0}. {1}", op.SelectToken("summary").Value<string>(), op.SelectToken("notes") == null ? "" : op.SelectToken("notes").Value<string>());
				var httpMethod = op.SelectToken("httpMethod").Value<string>();
			
				var responseType = ARICodeGen.SwaggerHelper.TypeConvert(op.SelectToken("responseClass").Value<string>());
				var taskType = ARICodeGen.SwaggerHelper.TypeConvertTask(op.SelectToken("responseClass").Value<string>());

				var parameters = string.Empty;
			
				try {
					var allParams = op.SelectToken("parameters").ToList();
					try {
						allParams = allParams.OrderByDescending(x => x.SelectToken("required").Value<bool>()).ToList();
					}catch{}

					foreach(var param in allParams) {
						// Get Param Type
						var paramType = ARICodeGen.SwaggerHelper.TypeConvert(param.SelectToken("dataType").Value<string>());
						// string defaultValue = param.SelectToken("defalutValue").Value<string>()
						var optionalString = "";
						if(param.SelectToken("required") != null && !param.SelectToken("required").Value<bool>()){
							if(paramType == "int" || paramType == "bool" || paramType == "long")
								paramType = paramType + "?";
							
							optionalString = " = null";
						}
						parameters += string.Format("{2}{1} {0}{3}", 
							param.SelectToken("name").Value<string>(), 
							paramType, 
							parameters.Length > 0 ? ", " : "", 
							optionalString);
					}
				}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
				}

#>
		/// <summary>
		/// <#= description ?? "no description provided" #>
		/// </summary>
<# 
				try {
					foreach(var param in op.SelectToken("parameters")) {
						if (param.SelectToken("decription").Value<string>() != null)
#>
		/// <param name="<#= param.SelectToken("name").Value<string>() #>"><#= param.SelectToken("description").Value<string>() #></param>
<#
					}
                }catch (Exception e){}
#>
		public async <#= taskType #> <#= ARICodeGen.SwaggerHelper.GetSafeName(methodName) + "Async" #>(<#= parameters #>)
		{
			string path = "<#= path #>";
			var request = GetNewRequest(path, HttpMethod.<#= httpMethod.ToUpper() #>);
<# 
			try {
				foreach(var param in op.SelectToken("parameters")) {
					var paramType = ARICodeGen.SwaggerHelper.TypeConvert(param.SelectToken("dataType").Value<string>());
					// Perform null check in code
#>
			if(<#= param.SelectToken("name").Value<string>() #> != null)
<#
					if(param.SelectToken("paramType").Value<string>() == "path"){
#>
				request.AddUrlSegment("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>);
<# 
					}else if(param.SelectToken("paramType").Value<string>() == "query"){
#>
				request.AddParameter("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>, ParameterType.QueryString);
<#
					}else if(param.SelectToken("paramType").Value<string>() == "body"){
#>
			{
				request.AddParameter("application/json", new { <#= param.SelectToken("name").Value<string>() #> = <#= param.SelectToken("name").Value<string>() #> }, ParameterType.RequestBody);
			}
<#
					}else if(param.SelectToken("paramType").Value<string>() == "header"){
#>
				request.AddParameter("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>, ParameterType.HttpHeader);
<#
					}else if(param.SelectToken("paramType").Value<string>() == "form"){
#>
				request.AddParameter("<#= param.SelectToken("name").Value<string>() #>", <#= param.SelectToken("name").Value<string>() #>, ParameterType.HttpHeader);
<#
					}



				}
			}catch(Exception ex){
					Trace.WriteLine(ex.ToString());
			}
			if(responseType == "void") {
#>
			var response = await ExecuteTask(request);
			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return;
<#			}else if(responseType == "byte[]") {
#>
			var response = await ExecuteTask(request);
			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return response.RawData;
<#			}else{#>

			var response = await ExecuteTask<<#= responseType #>>(request);

			if((int)response.StatusCode >= 200 && (int)response.StatusCode < 300)
				return response.Data;
<#			} #>
			switch((int)response.StatusCode)
            {
<#  
			try {
				foreach(var errorCode in op.SelectToken("errorResponses")) {
#>
				case <#= errorCode.SelectToken("code").Value<string>() #>:
					throw new AriException("<#= errorCode.SelectToken("reason").Value<string>() #>", (int)response.StatusCode);
<#  
				}
			}catch{}
        
#>
				default:
					// Unknown server response
					throw new AriException(string.Format("Unknown response code {0} from ARI.", response.StatusCode), (int)response.StatusCode);
            }
		}
<#		} 
		
	}
	//
	// end of for on operations 
	//
#>
	}
}

<#
	} 
}
	manager.StartNewFile("ARIClient.cs", projectName:"AsterNET.ARI", folderName:"ARI_1_0", fileProperties:fileProperties);
#>
/*
	AsterNET ARI Framework
	Automatically generated file @ <#= DateTime.Now.ToString() #>
*/
using System;
using System.Collections.Generic;
using AsterNET.ARI.Models;

namespace AsterNET.ARI
{
<#
	foreach (var evt in events)
    {
#>
	public delegate void <#= evt + "Handler"#>(IAriClient sender, <#= evt #> e);
<#
    }
#>
	public delegate void UnhandledEventHandler(object sender, AsterNET.ARI.Models.Event eventMessage);


	public interface IAriEventClient
	{
<#
	System.Diagnostics.Debug.WriteLine("event count " + events.Count);
    foreach (var evt in events)
    {
#>
		event <#= evt + "Handler"#> On<#= evt #>;
<#
    }
#>
		event UnhandledEventHandler OnUnhandledEvent;
	}


	/// <summary>
	/// 
	/// </summary>
	public class BaseAriClient : IAriEventClient
	{

		#region Events
		<#

			foreach (var evt in events) {
#>
			public event <#= evt + "Handler"#> On<#= evt #>;
<#
			}

		#>
			public event UnhandledEventHandler OnUnhandledEvent; 
		#endregion
		
		protected void FireEvent(string eventName, object eventArgs, IAriClient sender)
		{
		
			switch(eventName) 
			{
<#int i = 1;
	foreach (var evt in events)
    {
		
#>			
			
				case "<#= evt.Replace("Event", "") #>":
					if(On<#= evt #> != null)
						On<#= evt #>(sender, (<#= evt #>)eventArgs);
					else if (OnUnhandledEvent != null) OnUnhandledEvent(sender, (Event) eventArgs);
					break;
<#
		i++;
    }
#>
				default:
					if(OnUnhandledEvent!=null)
						OnUnhandledEvent(this, (Event)eventArgs);
					else if (OnUnhandledEvent != null) OnUnhandledEvent(sender, (Event) eventArgs);
					break;
			}
		}
	}
}
<#

manager.Process();
#>
